################################################################################
# if SSS == 110:
#   The content of the memory location, whose address is in registers H and L,
#   is moved to register r.
# else:
#   The content of register r2 is moved to register r1.
################################################################################
= MOV

################################################################################
# if DDD == 110:
#   The content of byte 2 of the instruction is moved to the memory location
#   whose address is in registers H and L.
# else:
#   The content of byte 2 of the instruction is moved to register r.
################################################################################
= MVI

################################################################################
# Byte 3 of the instruction is moved into the high-order register (rh)
# of the register pair rp. Byte 2 of the instruction is moved into
# the low-order register (rl) of the register pair rp.
################################################################################
= LXI

################################################################################
# The content of the memory location, whose address is specified in byte 2
# and byte 3 of the instruction, is moved to register A.
################################################################################
= LDA

################################################################################
# The content of the accumulator is moved to the memory location whose address
# is specified in byte 2 and byte 3 of the instruction.
################################################################################
= STA

################################################################################
# The content of the memory location, whose address is specified in byte 2
# and byte 3 of the instruction, is moved to register L. The content of
# the memory location at the succeeding address is moved to register H.
################################################################################
= LHLD

################################################################################
# The content of register L is mvoed to the memory location whose address
# is specified in byte 2 and byte 3. The content of register H is moved to
# the succeeding memory location.
################################################################################
= SHLD

################################################################################
# The content of the memory location, whose address is in the register pair rp,
# is moved to register A. Note: only register pairs rp=B (register B and C)
# or rp=D (registers D and E) may be specified.
################################################################################
= LDAX

################################################################################
# The content of register A is moved to the memory location whose address is
# in the register pair rp. Note: only register pairs rp=B (register B and C)
# or rp=D (register D and E) may be specified.
################################################################################
= STAX

################################################################################
# The contents of registers H and L are exchanged with the contents of
# registers D and E.
################################################################################
= XCHG

################################################################################
# if SSS == 110:
#   The content of the memory location whose address is contained in
#   the H and L registers is added to the content of the accumulator.
#   The result is placed in the accumulator.
# else:
#   The content of register r is added to the content of the accumulator.
#   The result is placed in the accumulator.
################################################################################
= ADD

################################################################################
# The content of the second byte of the instruction os added to the content
# of the accumulator. The result is placed in the accumulator.
################################################################################
= ADI

################################################################################
# if SSS == 110:
#   The content of the memory location whose address is contained in
#   the H and L registers and the content of the CY flag are added to
#   the accumulator. The result is placed in the accumulator.
# else:
#   The content of register r and the content of the carry bit are added to
#   the content of the accumulator. The result is placed in the accumulator.
################################################################################
= ADC

################################################################################
# The content of the second byte of the instruction and the content of the CY
# flag are added to the contents of the accumulator. The result is placed
# in the accumulator.
################################################################################
= ACI

################################################################################
# if SSS == 110:
#   The content of the memory location whose address is contained in
#   the H and L registers is subtracted from the content of the accumulator.
#   The result is placed in the accumulator.
# else:
#   The content if register r is subtracted from the content of the accumulator.
#   The result is placed in the accumulator.
################################################################################
= SUB

################################################################################
# The content of the second byte of the instruction is subtracted from
# the content of the accumulator. The result if placed in the accumulator.
################################################################################
= SUI

################################################################################
# if SSS == 110:
#   The content of the memory location whose address is contained in
#   the H and L registers and the content of the CY flag are both subtracted
#   from the accumulator. The result is placed in the accumulator.
# else:
#   The content of register r and the content of the CY flag are both
#   subtracted from the accumulator. The result is placed in the accumulator.
################################################################################
= SBB

################################################################################
# The contents of the second byte of the instruction and the contents of
# the CY flag are both subtracted from the accumulator. The result is placed
# in the accumulator.
################################################################################
= SBI

################################################################################
# if DDD == 110:
#   The content of the memory location whose address is contained in
#   the H and L registers is incremented by one. Note: All condition flags
#   except CY are affected.
# else:
#   The content of register r is incremented by one. Note: All condition flags
#   except CY are affected.
################################################################################
= INR

################################################################################
# if DDD == 110:
#   The content of the memory location whose address is contained in
#   the H and L registers is decremented by one. Note: All condition flags
#   except CY are affected.
# else:
#   The content of register r is decremented by one. Note: All condition flags
#   except CY are affected.
################################################################################
= DCR

################################################################################
# The content of the register pair rp is incremented by one.
# Note: No condition flags are affected.
################################################################################
= INX

################################################################################
# The content of the register pair rp is decremented by one.
# Note: No condition flags are affected.
################################################################################
= DCX

################################################################################
# The content of the register pair rp is added to the content of the register
# pair H and L. The result is placed in the register pair H and L. Note: Only
# the CY flag is affected. It is set if there is a carry out of the double
# precision add; otherwise it is reset.
################################################################################
= DAD

################################################################################
# The eight-bit number in the accumulator is adjusted to form two four-bit
# Binary-Coded-Decimal digits by the following process:
#
#   1.  If the value of the least significant 4 bits of the accumulator
#       is greater than 9 or if the AC flag is set, 6 is added
#       to the accumulator.
#
#   2.  If the value of the most significant 4 bits of the accumulator
#       is now greater than 9, or if the CY flag is set, 6 is added
#       to the most significant 4 bits of the accumulator.
#
# NOTE: All flags are affected.
################################################################################
= DAA

################################################################################
# if SSS == 110:
#   The content of the memory location whose address is contained in
#   the H and L registers is logically anded with the content of
#   the accumulator. The result is placed in the accumulator.
#   The CY flag is cleared.
# else:
#   The content of register r is logically anded with the content of
#   the accumulator. The result is placed in the accumulator.
#   The CY flag is cleared.
################################################################################
= ANA

################################################################################
# The content of the second byte of the instruction is logically anded with
# the contents of the accumulator. The result is placed in the accumulator.
# The CY and AC flags are cleared.
################################################################################
= ANI

################################################################################
# if SSS == 110:
#   The content of the memory location whose address is contained in
#   the H and L registers is exclusive-OR'd with the content of the accumulator.
#   The result is placed in the accumulator. The CY and AC flags are cleared.
# else:
#   The content of register r is exclusive-OR'd with the content of
#   the accumulator. The result is placed in the accumulator.
#   The CY and AC flags are cleared.
################################################################################
= XRA

################################################################################
# The content of the second byte of the instruction is exclusive-OR'd with
# the content of the accumulator. The result is placed in the accumulator.
# The CY and AC flags are cleared.
################################################################################
= XRI

################################################################################
# if SSS == 110:
#   The content of the memory location whose address is contained in
#   the H and L registers is inclusive-OR'd with the content of the accumulator.
#   The result is placed in the accumulator. The CY and AC flags are cleared.
# else:
#   The content of register r is inclusive-OR'd with the content of
#   the accumulator. The result is placed in the accumulator.
#   The CY and AC flags are cleared.
################################################################################
= ORA

################################################################################
# The content of the second byte of the instruction os inclusive-OR'd with
# the content of the accumulator. The result is placed in the accumulator.
# The CY and AC flags are cleared.
################################################################################
= ORI

################################################################################
# if SSS == 110:
#   The content of the memory location whose address is contained in
#   the H and L registers is subtracted from the accumulator. The accumulator
#   remains inchanged. The condition flags are set as a result of
#   the subtraction. The Z flag is set to 1 if (A) = ((H) (L)).
#   The CY flag is set to 1 if (A) < ((H) (L)).
################################################################################
= CMP

################################################################################
# The content of the second byte of the instruction is subtracted from
# the accumulator. The condition flags are set by the result of the subtraction.
# The Z flag is set to 1 of (A) = (byte 2). The CY flag is set to 1
# if (A) < (byte 2).
################################################################################
= CPI

################################################################################
# The content of the accumulator is rotated left one position. The low order
# bit and the CY flag are both set to the value shifted out of the high order
# bit position. Only the CY flag is affected.
################################################################################
= RLC

################################################################################
# The content of the accumulator is rotated right one position. The high order
# bit and the CY flags are both set to the value shifted out of the low order
# bit position. Only the CY flag is affected.
################################################################################
= RRC

################################################################################
# The content of the accumulator is rotated left one position through
# the CY flag. The low order bit is set equal to the CY flag and the CY flag
# is set to the value shifted out of the high order bit. Only the CY flag
# is affected.
################################################################################
= RAL

################################################################################
# The content of the accumulator is rotated right one position through
# the CY flag. The high order bit is set to the CY flag and the CY flag
# is set to the value shifted out of the low order bit. Only the CY flag
# is affected.
################################################################################
= RAR

################################################################################
# The contents of the accumulator are complemented (zero bits become 1,
# one bits become 0). No flags are affected.
################################################################################
= CMA

################################################################################
# The CY flag is complemented. No other flags are affected.
################################################################################
= CMC

################################################################################
# The CY flag is set to 1. No other flags are affected.
################################################################################
= STC

################################################################################
# Control is transferred to the instruction whose address is specified in
# byte 3 and byte 2 of the current instruction.
################################################################################
= JMP

################################################################################
# If specified condition is true, control is transferred to the instruction
# whose address is specified in byte 3 and byte 2 of the current instruction;
# otherwise, control continues sequentially.
################################################################################
= JC
= JNC
= JZ
= JNZ
= JP
= JM
= JPE
= JPO

################################################################################
# The high-order eight bits of the next instruction address are moved to
# the memory location whose address is one less than the content of register SP.
# The low-order eight bits of the next instruction address are moved to
# the memory location whose address is two less than the content of register SP.
# The content of register SP is decremented by 2. Control is transferred to
# the instruction wose address is specified in byte 3 and byte 2 of
# the current instruction.
################################################################################
= CALL

################################################################################
# If the specified condition is true, the actions specified in
# the CALL instruction (see above) are performed;
# otherwise, control continues sequentially.
################################################################################
= CC
= CNC
= CZ
= CNZ
= CP
= CM
= CPE
= CPO

################################################################################
# The content of the memory location whose address is specified in register SP
# is moved to the low-order eight bits of register PC. The content of
# the memory location whose address is one more than the content of register SP
# is moved to the high-order eight bits of register PC. The content of
# register SP is incremented by 2.
################################################################################
= RET

################################################################################
# If the specified condition is true, the actions specified in
# the RET instruction (see above) are performed;
# otherwise, control continues sequentially.
################################################################################
= RC
= RNC
= RZ
= RNZ
= RP
= RM
= RPE
= RPO

################################################################################
# The high-order eight bits of the next instruction address are moved to
# the memory location whose address is one less than the content of register SP.
# The low-order eight bits of the next instruction address are moved to
# the memory location whose address is two less than the content of register SP.
# The content of register SP is decremented by two. Control is transferred to
# the instruction whose address is eight times the content of NNN.
################################################################################
= RST

################################################################################
# The content of register H is moved to the high-order eight bits of
# register PC. The content of register L is moved to the low-order eight bits
# of regiter PC.
################################################################################
= PCHL

################################################################################
# if RP == 11:
#   The content of register A is moved to the memory location whose address is
#   one less than register SP. The contents of the condition flags are
#   assembled into a processor status word and the word is moved to the memory
#   location whose address is two less than the content of register SP.
#   The content of register SP is decremented by two.
# else:
#   The content of the high-order register of register pair rp is moved to
#   the memory location whose address is one less than the content of
#   register SP. The content of the low-order register of register pair rp is
#   moved to the memory location whose address is two less than the content of
#   register SP. The content of register SP is decremented by 2.
#   Note: Register pair rp = SP may not be specified.
################################################################################
= PUSH

################################################################################
# if RP == 11:
#   The content of the memory location whose address is specified by
#   the content of register SP is used to restore the condition flags.
#   The content of the memory location whose address is one more than
#   the content of register SP is moved to register A.
#   The content of register SP is incremented by 2.
# else:
#   The content of the memory location, whose address is specified by
#   the content of register SP, is moved to the low-order register of
#   register pair rp. The content of the memory location, whose address is
#   one more than the content of register SP, is moved to the high-order
#   register of register pair rp. The content of register SP is
#   incremented by 2. Note: Register pair rp = SP may not be specified.
################################################################################
= POP

################################################################################
# The content of the L register is exchanged with the content of the memory
# location whose address is specified by the content of register SP.
# The content of the H register is exchanged with the content of the memory
# location whose address is one more than the content of register SP.
################################################################################
= XTHL

################################################################################
# The contents of registers H and L (16 bits) are moved to register SP.
################################################################################
= SPHL

################################################################################
# The data placed on the eight bit bi-directional data bus by
# the specified port is moved to register A.
################################################################################
= IN

################################################################################
# The content of register A is placed on the eight bit bi-directional data bus
# for transmission to the specified port.
################################################################################
= OUT

################################################################################
# The interrupt system is enabled following the execution of
# the next instruction.
################################################################################
= EI

################################################################################
# The interrupt system is disabled immediately following the execution of
# the DI instruction.
################################################################################
= DI

################################################################################
# The processor is stopped. The registers and flags are unaffected.
################################################################################
= HLT

################################################################################
# No operation is performed. The registers and flags are unaffected.
################################################################################
= NOP

